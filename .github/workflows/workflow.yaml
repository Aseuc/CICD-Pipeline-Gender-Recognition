name: CI-CD-Workflow Gender Recognition
on:
  push:
    branches: [no_img_align_celeba]
    
jobs:
  build-and-test:
      runs-on: [ubuntu-latest]
      container: docker://dvcorg/cml-py3:latest
      steps:
        - uses: actions/checkout@v3
          with:
            sparse-checkout: |
              .github
              src

        - name: ShellSkript Test
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            
              chmod +x .github/workflows/model_metrics.sh
              ./.github/workflows/model_metrics.sh


  #       - name: Abhängigkeiten installieren
  #         run: |
  #           python -m pip install --upgrade pip
  #           pip install -r requirements.txt

  #       - name: 'Datenaufbereitung und -tests'
  #         run: |
  #           python data/dataprep_scripts/datapreparation.py 

  #       - name: Generierung und Veröffentlichung der visualisierten Daten,Tests und Verteilungen
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
            
  #           report_file_distribution="report_distribution.md"
  #           expoFile="data/report_data/exponential_distribution.txt"
  #           if [ -s "$file" ]
  #           then
  #             echo "## Daten folgen wahrscheinlich einer Exponentialverteilung!" > $report_file_distribution
  #             cat $expoFile >> $report_file_distribution
  #           else
  #             echo " "
  #           fi
  #           binomiaFile="data/report_data/binomia_distribution.txt"
  #           if [ -s "$file" ]
  #           then
  #             echo "## Daten folgen wahrscheinlich einer Binomialverteilung!" > $report_file_distribution
  #             cat $binomiaFile >> $report_file_distribution
  #           else
  #             echo " "
  #           fi
  #           normFile="data/report_data/norm_distribution.txt"
  #           if [ -s "$file" ]
  #           then
  #             echo "## Daten folgen wahrscheinlich einer Normalverteilung!" > $report_file_distribution
  #             cat $normFile >> $report_file_distribution
  #           else
  #             echo " "
  #           fi
  #           uniformFile="data/report_data/uniform_distribution.txt"
  #           if [ -s "$file" ]
  #           then
  #             echo "## Daten folgen wahrscheinlich einer Uniformverteilung!" > $report_file_distribution
  #             cat $uniformFile >> $report_file_distribution
  #           else
  #             echo " "
  #           fi
  #           report_file="report_data_plots.md"
  #           # Read the column names from the CSV file
  #           columns=$(head -n 1 data/column_source_csv/source.csv | tr ',' '\n')
  #           # Iterate over each column
  #           for column in $columns; do
  #             # Update the report
  #             echo "\n## Datenvisualisierung für $column" >> $report_file
  #             cml-publish data/plot_data/${column}.png --md >> $report_file
  #           done
            
  #           echo "\n## Balancierte Daten Geschlechter" >> $report_file
  #           cml-publish data/plots_balanced/Gender_balanced.png
  #           echo "\n## Balancierte Daten Jung und Alt" >> $report_file
  #           cml-publish data/plots_balanced/Young_balanced.png

  #           cml-send-comment $report_file
            
  #       - name: 'Modell trainieren'
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           python model/model_script/model_train.py

  #       - name: 'Modell testen'                   
  #         run: |
  #           python test/model_test_scripts/model_test.py
        
  #       - name: "Veröffenlichung der Fairlearn-Tests"
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           echo "## Model Metriken" > report_ml.md
  #           cat test/metrics/metrics.txt >> report_ml.md
  #           echo "\n## Fairlearn Ergebnisse" >> report_ml.md
  #           cml-publish   test/metrics/metrics.jpg --md >> report_ml.md
  #           cml-publish test/metricsFairlearn/Fig1metricsFairLearn.jpg --md >> report_ml.md
  #           cml-publish test/metricsFairlearn/Fig2metricsFairLearn.jpg --md >> report_ml.md
  #           cml-send-comment report_ml.md
    
  #       - name: Veröffentlichung der Modellmetriken mit verrauschten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_test_rauschen.md"
  #           echo "## Modellmetriken mit verauschten Bilder" > $report_file      
  #           for file in test/test-plots-rauschen/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
            
  #       - name: Veröffentlichung der Modellmetriken mit verzerrten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_test_verzerrung.md"
  #           echo "## Modellmetriken mit verauschten Bilder" > $report_file      
  #           for file in test/test-plots-verzerrung/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
  #       - name: Veröffentlichung der Plots mit verdrehten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_rotation.md"
  #           echo "## Modellmetriken mit verdrehte Bilder" > $report_file      
  #           for file in test/test-plots-rotation/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
  #       - name: "Veröffenlichung der Erklärbarkeit des Modells"
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file_activation="report_activation.md"
  #           echo "## Erklärbarkeit des Modells" > report_activation.md       
  #           for file in test/activation_map/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file_activation
  #           done
  #           cml-send-comment $report_file_activation    

  #       - name: Generierte Dateien in das Repository pushen
  #         run: |
  #           git config --local user.email "Aseuc@github.com"
  #           git config --local user.name "Aseuc"
  #           git add model/PyTorch_Trained_Models
  #           git commit -m "Add trained model" || echo "No changes to commit"
  #           git push origin main
        
        
    
  # deploy:
  #   needs: build-and-test
  #   runs-on: [ubuntu-latest]
  #   container: docker://dvcorg/cml-py3:latest
  #   steps:
  #     - name: Caching von pip Abhängigkeiten
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #       env:
  #         GITHUB_TOKEN: "${{secrets.WORKFLOW_TOKEN}}"

  #     - uses: actions/checkout@v2
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
      
  #     - name: ML-Modell auf streamlit deployen
  #       run: |
  #         git pull origin main
  #         git push origin main
  #         git config --local user.email "Aseuc@github.com"
  #         git config --local user.name "Aseuc"
  #         git add .
  #         git commit -m "Add generated file" -a || echo "No changes to commit"
  #         git push origin main
