name: CI-CD-Workflow Gender Recognition
on:
  push:
    branches: [smaller-dataset]
    
jobs:
  build-and-test:
      runs-on: [ubuntu-latest]
      container: docker://dvcorg/cml-py3:latest
      steps:
        - name: Cache pip dependencies
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{hashFiles('requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
          env:
            GITHUB_TOKEN: "${{ secrets.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 }}"

        - uses: actions/checkout@v2
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}

        - name: Abhängigkeiten installieren
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install nbconvert

        - name: 'Datenaufbereitung und -tests'
          run: |
            jupyter nbconvert --to script data/dataprep_scripts/dataprep_git.ipynb 
            python data/dataprep_scripts/dataprep_git.py 

        - name: Generierung und Veröffentlichung der visualisierten Daten und Tests
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            
            report_file_distribution="report_distribution.md"

            expoFile="data/report_data/exponential_distribution.txt"

            if [ -s "$file" ]
            then
              echo "## Daten folgen wahrscheinlich einer Exponentialverteilung!" > $report_file_distribution
              cat $expoFile >> $report_file_distribution
            else
              echo " "
            fi

            binomiaFile="data/report_data/binomia_distribution.txt"

            if [ -s "$file" ]
            then
              echo "## Daten folgen wahrscheinlich einer Binomialverteilung!" > $report_file_distribution
              cat $binomiaFile >> $report_file_distribution
            else
              echo " "
            fi


            normFile="data/report_data/norm_distribution.txt"

            if [ -s "$file" ]
            then
              echo "## Daten folgen wahrscheinlich einer Normalverteilung!" > $report_file_distribution
              cat $normFile >> $report_file_distribution
            else
              echo " "
            fi

            uniformFile="data/report_data/uniform_distribution.txt"

            if [ -s "$file" ]
            then
              echo "## Daten folgen wahrscheinlich einer Uniformverteilung!" > $report_file_distribution
              cat $uniformFile >> $report_file_distribution
            else
              echo " "
            fi

            report_file="report_data_plots.md"

            # Read the column names from the CSV file
            columns=$(head -n 1 data/column_source_csv/source.csv | tr ',' '\n')
        
            # Iterate over each column
            for column in $columns; do
              # Update the report
              echo "\n## Datenvisualisierung für $column" >> $report_file
            
              cml-publish data/plot_data/${column}.png --md >> $report_file
            done
        
            cml-send-comment $report_file
            
        - name: 'Modell trainieren'
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            jupyter nbconvert --to script model/ml_model_scripts/pytorch_train.ipynb
            python model/ml_model_scripts/pytorch_train.py
            echo "## Model Metriken" > report_ml.md
            cat model/metrics/metrics.txt >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance bzw. das Matching zwischen Predictions und True-Labels in einer Heatmap dargestellt!" >> report_ml.md
            cml-publish model/plots/heatmap.jpg --md >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance in einem Scatter-Plot dargestellt" >> report_ml.md
            cml-publish model/plots/plot_scatter.jpg --md >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance in einem normalen Plot dargestellt" >> report_ml.md
            cml-publish model/plots/plot_plt.jpg --md >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance in einem normalen Plot dargestellt" >> report_ml.md
            cml-publish model/plots/metricsFairLearn.jpg --md >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance in einem normalen Plot dargestellt" >> report_ml.md
            cml-publish model/plots/metrics.jpg --md >> report_ml.md
            echo "\n## Model Performance" >> report_ml.md
            echo "Modell Performance in einem normalen Plot dargestellt" >> report_ml.md
            cml-publish model/plots/plot_bar.jpg --md >> report_ml.md
            cml-send-comment report_ml.md


        - name: 'Modell auf Robustheit testen'
          run: |
            jupyter nbconvert --to script test/model_test_scripts/model_test.ipynb
            python test/model_test_scripts/model_test.py

        - name: Veröffentlichung der Plots mit verrauschten Bildern
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            report_file="report_test_rauschen.md"
            for file in test/test-plots-rauschen/*.png; do
              echo "Publishing $file"
              cml-publish "$file" --md >> $report_file
            done
            cml-send-comment $report_file
            
        - name: Veröffentlichung der Plots mit verzerrten Bildern
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            report_file="report_test_verzerrung.md"
            for file in test/test-plots-verzerrung/*.png; do
              echo "Publishing $file"
              cml-publish "$file" --md >> $report_file
            done
            cml-send-comment $report_file
            
        
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: ML-Modell auf streamlit deployen
      run: |
        git config --local user.email "Aseuc@github.com"
        git config --local user.name "Aseuc"
        git add .
        git commit -m "Add generated file" -a || echo "No changes to commit"
        git push origin smaller-dataset