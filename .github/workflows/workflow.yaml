name: CI-CD-Workflow Gender Recognition
on:
  push:
    branches: [new_dataset]
    
jobs:
  build-and-test:
      runs-on: [ubuntu-latest]
      container: docker://dvcorg/cml-py3:latest
      steps:
        - name: Caching von pip Abhängigkeiten
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{hashFiles('requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
          env:
            GITHUB_TOKEN: "${{secrets.WORKFLOW_TOKEN}}"

        - uses: actions/checkout@v2
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}

        - name: Abhängigkeiten installieren
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: 'Datenaufbereitung und -tests'
          run: |
            python data/dataprep_scripts/datapreparation.py 

        # - name: Generierung und Veröffentlichung der visualisierten Daten,Tests und Verteilungen
        #   env:
        #     repo_token: ${{ secrets.GITHUB_TOKEN }}
        #   run: |
        #     chmod +x .github/workflows/visualize_data.sh            
        #     ./.github/workflows/visualize_data.sh
              
        # - name: 'Modell trainieren'
        #   env:
        #     repo_token: ${{ secrets.GITHUB_TOKEN }}
        #   run: |
        #     python model/model_script/model_train.py

  #       - name: 'Modell testen'                   
  #         run: |
  #           python test/model_test_scripts/model_test.py
        
        - name: "Veröffentlichung der Modelmetriken"
          env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
          run: |
            
            - name: "Veröffentlichung der Modellmetriken"
              env:
                repo_token: ${{ secrets.GITHUB_TOKEN }}
              run: |
                chmod +x .github/workflows/publish_model_metrics.sh
                ./.github/workflows/publish_model_metrics.sh
    
  #       - name: Veröffentlichung der Modellmetriken mit verrauschten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_test_rauschen.md"
  #           echo "## Modellmetriken mit verauschten Bilder" > $report_file      
  #           for file in test/test-plots-rauschen/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
            
  #       - name: Veröffentlichung der Modellmetriken mit verzerrten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_test_verzerrung.md"
  #           echo "## Modellmetriken mit verauschten Bilder" > $report_file      
  #           for file in test/test-plots-verzerrung/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
  #       - name: Veröffentlichung der Plots mit verdrehten Bildern
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file="report_rotation.md"
  #           echo "## Modellmetriken mit verdrehte Bilder" > $report_file      
  #           for file in test/test-plots-rotation/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file
  #           done
  #           cml-send-comment $report_file
  #       - name: "Veröffenlichung der Erklärbarkeit des Modells"
  #         env:
  #           repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         run: |
  #           report_file_activation="report_activation.md"
  #           echo "## Erklärbarkeit des Modells" > report_activation.md       
  #           for file in test/activation_map/*.png; do
  #             echo "Publishing $file"
  #             cml-publish "$file" --md >> $report_file_activation
  #           done
  #           cml-send-comment $report_file_activation    

  #       - name: Generierte Dateien in das Repository pushen
  #         run: |
  #           git config --local user.email "Aseuc@github.com"
  #           git config --local user.name "Aseuc"
  #           git add model/PyTorch_Trained_Models
  #           git commit -m "Add trained model" || echo "No changes to commit"
  #           git push origin new_dataset
        
        
    
  # deploy:
  #   needs: build-and-test
  #   runs-on: [ubuntu-latest]
  #   container: docker://dvcorg/cml-py3:latest
  #   steps:
  #     - name: Caching von pip Abhängigkeiten
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{hashFiles('requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #       env:
  #         GITHUB_TOKEN: "${{secrets.WORKFLOW_TOKEN}}"

  #     - uses: actions/checkout@v2
  #       env:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
      
  #     - name: ML-Modell auf streamlit deployen
  #       run: |
  #         git pull origin new_dataset
  #         git push origin new_dataset
  #         git config --local user.email "Aseuc@github.com"
  #         git config --local user.name "Aseuc"
  #         git add .
  #         git commit -m "Add generated file" -a || echo "No changes to commit"
  #         git push origin new_dataset
